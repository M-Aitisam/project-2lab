@page "/announcement"
@inject AuthenticationService AuthService
@inject project_2lab.Data.AnnouncementService AnnouncementService

<div class="announcement-board">
    @if (!AuthService.IsAuthenticated)
    {
        <!-- Login Form -->
        <div class="login-form">
            <h3>Login</h3>
            <input type="email" @bind="email" placeholder="Email" />
            <input type="password" @bind="password" placeholder="Password" />
            <button class="btn btn-primary" @onclick="Login">Login</button>
            @if (loginFailed)
            {
                <p class="error-message">Invalid email or password.</p>
            }
        </div>
    }
    else
    {
        <h3 class="announcement-title">Announcement Board</h3>

        @if (AuthService.IsAdmin)
        {
            <!-- Admin: Post Announcement -->
            <div class="post-announcement">
                <input class="announcement-input" @bind="newAnnouncementMessage" placeholder="Enter new announcement" />
                <button class="btn btn-primary post-btn" @onclick="PostAnnouncement">Post Announcement</button>
                @if (isDuplicate)
                {
                    <p class="error-message">Duplicate announcement detected. Please enter a unique announcement.</p>
                }
            </div>
        }

        <!-- Display Announcements -->
        <ul class="announcement-list">
            @foreach (var announcement in announcements.DistinctBy(a => a.Message))
            {
                <li class="announcement-item @(announcement.IsRead ? "read" : "unread")">
                    <div class="announcement-content">
                        <span class="announcement-message">@announcement.Message</span>
                        <span class="announcement-timestamp">@announcement.Timestamp.ToString("HH:mm:ss")</span>
                    </div>
                    @if (!announcement.IsRead && !AuthService.IsAdmin)
                    {
                        <button class="btn btn-secondary mark-btn" @onclick="() => MarkAsRead(announcement)">Mark as Read</button>
                    }
                </li>
            }
        </ul>
        <button class="btn btn-secondary" @onclick="Logout">Logout</button>
    }
</div>

@code {
    private string? newAnnouncementMessage;
    private List<Announcement> announcements = new List<Announcement>();
    private string email = string.Empty;
    private string password = string.Empty;
    private bool loginFailed = false;
    private bool isDuplicate = false;

    protected override async Task OnInitializedAsync()
    {
        announcements = (await AnnouncementService.GetAnnouncementsAsync())
                        .DistinctBy(a => a.Message)
                        .ToList();
    }

    private async Task PostAnnouncement()
    {
        isDuplicate = false;

        if (!string.IsNullOrWhiteSpace(newAnnouncementMessage))
        {
            if (announcements.Any(a => a.Message.Equals(newAnnouncementMessage, StringComparison.OrdinalIgnoreCase)))
            {
                isDuplicate = true;
                return;
            }

            var announcement = new Announcement
                {
                    Message = newAnnouncementMessage,
                    Timestamp = DateTime.Now,
                    IsRead = false
                };

            await AnnouncementService.AddAnnouncementAsync(announcement);
            announcements.Insert(0, announcement);
            announcements = announcements.DistinctBy(a => a.Message).ToList();
            newAnnouncementMessage = string.Empty;
        }
    }

    private void MarkAsRead(Announcement announcement)
    {
        announcement.IsRead = true;
    }

    private async Task Login()
    {
        var success = await AuthService.LoginAsync(email, password);
        if (!success)
        {
            loginFailed = true;
        }
        else
        {
            loginFailed = false;
            announcements = (await AnnouncementService.GetAnnouncementsAsync())
                            .DistinctBy(a => a.Message)
                            .ToList();
        }
    }

    private void Logout()
    {
        AuthService.Logout();
        email = string.Empty;
        password = string.Empty;
        announcements.Clear();
    }
}
