@page "/dashboard-page"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Timers
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@using Microsoft.AspNetCore.Identity
@inject ILogger<Dashboard> Logger

<h3 class="dashboard-header">Dashboard</h3>

<AuthorizeView Roles="Manager">
    <Authorized>
        <div class="manager-view">
            <h4>Welcome, Manager!</h4>
            <p>You have real-time notifications below:</p>
            <div class="notification-area">
                <ul>
                    @foreach (var notification in Notifications)
                    {
                        <li>@notification</li>
                    }
                </ul>
                <button class="btn btn-danger clear-btn" @onclick="ClearNotifications">Clear Notifications</button>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="non-manager-view">
            <h4>Welcome to your Dashboard!</h4>
            <p>Here is your summary:</p>
            <ul>
                <li>Total Tasks Completed: 45</li>
                <li>Pending Tasks: 5</li>
                <li>Team Members: 12</li>
            </ul>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<string> Notifications = new();
    private Timer? NotificationTimer;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing Dashboard...");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true && user.Identity.Name != null)
        {
            Logger.LogInformation($"User is authenticated: {user.Identity.Name}");
            var identityUser = await UserManager.FindByNameAsync(user.Identity.Name);
            if (identityUser != null)
            {
                Logger.LogInformation("Identity user found.");
                if (await UserManager.IsInRoleAsync(identityUser, "Manager"))
                {
                    Logger.LogInformation("User is in Manager role.");
                    StartNotificationTimer();
                }
                else
                {
                    Logger.LogWarning("User is not in Manager role.");
                }
            }
            else
            {
                Logger.LogWarning("Identity user not found.");
            }
        }
        else
        {
            Logger.LogWarning("User is not authenticated.");
        }
    }

    private void StartNotificationTimer()
    {
        NotificationTimer = new Timer(5000); // Trigger every 5 seconds
        NotificationTimer.Elapsed += (sender, args) =>
        {
            InvokeAsync(() =>
            {
                Notifications.Add($"New Notification at {DateTime.Now}");
                if (Notifications.Count > 50)
                {
                    Notifications.RemoveAt(0); // Remove the oldest notification
                }
                StateHasChanged();
            });
        };
        NotificationTimer.Start();
    }

    private void ClearNotifications()
    {
        Notifications.Clear();
    }

    public void Dispose()
    {
        NotificationTimer?.Stop();
        NotificationTimer?.Dispose();
    }
}
